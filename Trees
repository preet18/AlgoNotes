üåüÔ∏èTREESüåüÔ∏è

1.[LOWEST COMMON ANCESTOR OF BINARY TREE]
Eg:
Image: LCA of BinaryTree & Spiral form
A binary tree is given as input.
LCA(4,5)=2
LCA(4,6)=1
LCA(3,4)=1
LCA(2,4)=2

Solution:
M1: Using Recursion - O(N)|O(H)
N - no of nodes in the tree
H - height of the tree

static boolean v1 = false, v2 = false;

Node findLCA(int n1, int n2, Node root){
	v1 = false;
	v2 = false;

	Node lca = findLCAUtil(root, n1, n2);
	if(v1&&v2){
		return lca;
	}else{
		return null;
	}
}

Node findLCAUtil(Node node, int n1, int n2){
	if(node==null)
		return null;
	Node temp = null;
	if(node.data==n1){
		v1 = true;
		temp = node;
	}
	if(node.data==n2){
		v2 = true;
		temp = node;
	}
	
	Node left_lca = findLCAUtil(node.left, n1, n2);
	Node right_lca = findLCAUtil(node.right, n1, n2);

	if(temp!=null){
		return temp;
	}

	if(left_lca!=null && right_lca!=null){
		return node;
	}

	return left_lca!=null ? left_lca : right_lca;
}

2.[PRE ORDER TRAVERSAL]
Eg:
i/p: Image: Pre, In, Post, Level Order
o/p: 1 2 4 5 3

Logic::
void printPreorder(Node node){ 
        if (node == null) 
            return; 
  
        /* first print data of node */
        System.out.print(node.data + " "); 
  
        /* then recur on left sutree */
        printPreorder(node.left); 
  
        /* now recur on right subtree */
        printPreorder(node.right); 
} 

3.[IN ORDER TRAVERSAL]
Eg:
i/p: Image: Pre, In, Post, Level Order
o/p: 4 2 5 1 3


Logic::
void printInorder(Node node){ 
        if (node == null) 
            return; 
  
        /* first recur on left child */
        printInorder(node.left); 
  
        /* then print the data of node */
        System.out.print(node.data + " "); 
  
        /* now recur on right child */
        printInorder(node.right); 
} 
  

4.[POST ORDER TRAVERSAL]
Eg:
i/p: Image: Pre, In, Post, Level Order
o/p: 4 5 2 3 1

Logic::
void printPostorder(Node node){ 
        if (node == null) 
            return; 
  
        // first recur on left subtree 
        printPostorder(node.left); 
  
        // then recur on right subtree 
        printPostorder(node.right); 
  
        // now deal with the node 
        System.out.print(node.data + " "); 
} 
  


5.[LEVEL ORDER TRAVERSAL]
Eg:
i/p: Image: Pre, In, Post, Level Order
o/p: 
1
2 3
4 5	

Logic::

M1: Using function to print elements at a given level - O(N*N)|O(H) - Worst case in case of skewed trees
O(N) - No of nodes in the tree
H - Height of the tree - is N in case  of skewed trees


void printLevelOrder(){ 
        int h = height(root); 
        int i; 
        for (i=1; i<=h; i++) 
            printGivenLevel(root, i); 
} 
  
/* Compute the "height" of a tree -- the number of 
nodes along the longest path from the root node 
down to the farthest leaf node.*/
int height(Node root){ 
        if (root == null) 
           return 0; 
        else
        { 
            /* compute  height of each subtree */
            int lheight = height(root.left); 
            int rheight = height(root.right); 
              
            /* use the larger one */
            if (lheight > rheight) 
                return(lheight+1); 
            else return(rheight+1);  
        } 
} 
  
/* Print nodes at the given level */
void printGivenLevel (Node root ,int level){ 
        if (root == null) 
            return; 
        if (level == 1) 
            System.out.print(root.data + " "); 
        else if (level > 1) 
        { 
            printGivenLevel(root.left, level-1); 
            printGivenLevel(root.right, level-1); 
        } 
}


M2: Using Queue - O(N)|O(N)
N - No of nodes in the tree

Logic::
void printLevelOrder(){ 
        Queue<Node> queue = new LinkedList<Node>(); 
        queue.add(root); 
        while (!queue.isEmpty())  
        { 
  
            /* poll() removes the present head. 
            For more information on poll() visit  
            http://www.tutorialspoint.com/java/util/linkedlist_poll.htm */
            Node tempNode = queue.poll(); 
            System.out.print(tempNode.data + " "); 
  
            /*Enqueue left child */
            if (tempNode.left != null) { 
                queue.add(tempNode.left); 
            } 
  
            /*Enqueue right child */
            if (tempNode.right != null) { 
                queue.add(tempNode.right); 
            } 
        } 
} 

6.[CONNECT NODES AT SAME LEVEL (Level Order Traversal)]
Eg:
i/p: Image: ConnectNodesAtSameLvl(Input)
o/p: Image: ConnectNodesAtSameLvl(Output)


Solution:
M1: USing Iterative Approach - O(N)|O(N)
N - No of nodes in the tree

Logic::
class Node{
	int data;
	Node left, right, nextRight;
	Node(int data){
		this.data = data;
		left = right = nextRight = null;
	}
}


connect(Node root){
	Queue<Node> queue = new LinkedList<Node>();
	queue.add(root);
	queue.add(null);//null marker to represent end of current level

	while(!queue.isEmpty()){
		Node p = queue.peek();
		queue.remove();
		if(p!=null){
			p.nextRight = queue.peek();
			if(p.left!=null){
				queue.add(p.left);
			}
			if(p.right!=null){
				queue.add(p.right);
			}
		}else if(!queue.isEmpty()){ // if queue is not empty push NULL to mark nodes at this level are visited
			queue.add(null);
		}
	}
}


M2: Using Recursive Approach - O(N)|O(1)
N - No of nodes in the tree

Logic::
connectRecur(Node p){
	if(p==null)
		return;

	if(p.nextRigth!=null)
		connectRecur(p.nextRight);
	
	if(p.left!=null){
		if(p.right!=null){
			p.left.nextRight = p.right.nextRight;
			p.right.nextRight = getNextRight(p);
		}else{
			p.left.nextRight = getNextRight(p);
		}
		connectRecur(p.left);
	}else if(p.right!=null){
		p.right.nextRight = getNextRight(p);
		connectRecur(p.right);
	}else{
		connectRecur(getNextRight(p));
	}
}


Node getNextRight(Node p){
	Node temp = p.nextRight;
	while(temp!=null){
		if(temp.left!=null){
			return temp.left;
		}else if(temp.right!=null){
			return temp.right;
		}
		temp = temp.nextRight;
	}
	return null;
}


7.[LEVEL ORDER TRAVERSAL IN SPIRAL FORM]
Eg:
i/p: Image: LCA of BinaryTree & Spiral form
o/p:
1
2,3
7,6,5,4


Solution:
M1: Using Recursive Approach O(N*N)|O(H) - Worst case scenario in case of skewed trees
N- No of nodes in the tree
H - Height of the tree - is N in case of skewed trees

Logic::
void printSpiral(Node node){
	int h = height(node);
	int i;

	boolean ltr = false;
	for(int i=1; i<=h; i++){
		printGivenLevel(node, i, ltr);
		ltr =!ltr;
	}	
}

void printGivenLevel(Node node, int level, int ltr){
	if(node==null)
		return;
	if(level==1)
		S.O.P(node.data + " ");
	else if(level>1){
		if(ltr){
			printGivenLevel(node.left, level-1, ltr);
			printGivenLevel(node.right, level-1, ltr);
		}else{
			printGivenLevel(node.right, level-1, ltr);
			printGivenLevel(node.left, level-1, ltr);
		}
	}
}

M2: Using Iterative Approach(Using 2 stacks) - O(N)|O(N)
N - No of nodes in the tree


Logic::

void printSpiral(Node node){
	if(node==null)
		return;
	Stack<Node> s1 = new Stack<>();
	Stack<Node> s2 = new Stack<>();

	s1.push(node);
	
	while(!s1.empty()||!s2.empty()){
		while(!s1.empty()){
			Node temp = s1.pop();
			System.out.println(temp.data);
			if(temp.right!=null){
				s2.push(temp.right);
			}
			if(temp.left!=null){
				s2.push(temp.left);
			}
		}
		while(!s2.empty()){
			Node temp = s2.pop();
			System.out.println(temp.data);
			if(temp.left!=null){
				s1.push(temp.left);
			}
			if(temp.right!=null){
				s1.push(temp.right);
			}
		}
	}
}

8.[LOWEST COMMON ANCESTOR IN A BINARY SEARCH TREE]
Eg: 
i/p: Image : LCA of BST
o/p: 
lca(10,14) = 12
lca(14,8) = 8
lca(10,22) = 20

Solution:
M1: O(N)|O(H)
N - Total no of nodes in the tree
H - Height of the tree - is N in case of skewed tree

Logic::
Node lca(Node node, int n1, int n2){
	if(node==null){
		return null;
	}
	if(n1<node.val && n2<node.val){
		return lca(node.left, n1, n2);
	}
	if(n1>node.val && n2>node.val){
		lca(node.right, n1, n2);
	}
	return node;
}



9.[DELETE A NODE/VALUE FROM BST]
Eg:Image : Delete a node in BST

Solution:
M1: O(H)|O(H) - Best case, O(N)|O(N) - Worst case in case of skewed trees 
1.Node to be deleted is leaf - Simply remove from the tree
2.Node to be deleted has only one child  - Copy the child to the node and delete the child
3.Node to be deleted has two children - Find inorder successor of the node. Copy contents of the inorder successor to the node and delete the inorder successor.
Note the inorder predecessor can also be used.

Logic::

Node deleteKey(int key){
	return deleteRec(root, key);	
}

Node deleteRec(Node root, int key){
	if(root==null) //Base case, if tree is empty
		return root;
	if(key<root.key){
		root.left = deleteRec(root.left, key);
	}else if(key > root.key){
		root.right = deleteRec(root.right, key);
	}else{
		if(root.left==null)
			return root.right;
		else if(root.right==null)
			return root.left;
		root.key = minValue(root.right);
		root.right = deleteRec(root.right, root.key);
	}
}


10.[VALIDATE BST]
Eg:
i/p: Image : Validate BST
o/p:true/false

Solution:
M1: O(N)|O(H)
N - No of nodes in the tree
H - Height of the tree - O(N) in case of skewed tree

Logic::
boolean validateBST(BST tree){
	if(tree==null)
		return true;	
	return VBU(tree, Integer.MIN_VALUE, Integer.MAX_VALUE);
}

boolean VBU(Node tree, int minValue, int maxValue){
	if(tree.val<minValue||tree.val>maxValue){
		return false;
	}
	if(tree.left!=null && !VBU(tree.left, minValue, tree.val)){
		return false;
	}
	if(tree.right!=null && !VBU(tree.right, tree.val, maxValue)){
		return false;
	}
	return true;
}


11.[INVERT BINARY TREE(MIRRORED TREE)]
Eg: Image : Inversion of BinaryTree(Mirrored Tree)


Solution:
M1: Using Queue - O(N)|O(N)
N - no of nodes in the tree

invertBinaryTree(Node tree){
	if(tree==null){
		return;
	}
	Queue<Node> q = new LinkedList<>();
	q.add(tree);
	while(!q.isEmpty()){
		Node currNode = q.poll();
		Node temp = currNode.left;
		currNode.left = currNod.right;
		currNode.right = temp;
		if(currNode.left!=null){
			queue.add(currNode.left);
		}
		if(currNode.right!=null){
			queue.add(currNode.right);	
		}
	}
}


M2: Using Recursion - O(N)|O(H)
N - No of nodes in the tree
H - Height of the tree - is N - in case of skewed tree

invertBinaryTree(Node tree){
	if(tree==null)
		return;
	Node left = tree.left;
	tree.left = tree.right;
	tree.right = left;
	
	invertBinaryTree(tree.left);
	invertBinaryTree(tree.right);
}


12.[HEIGHT OF A BINARY TREE]
Eg:
i/p:
o/p:

M1: O(N)|O(H)
N - No of nodes
H - stack space used for recursion

Logic::
int maxDepth(Node node){
	if(node==NULL){
		return 0;
	}else{
		int lDepth = maxDepth(node.left);
		int rDepth = maxDepth(node.right);

		if(lDepth > rDepth){
			return lDepth+1;
		}else{
			return rDepth+1;
		}
	}
}

13.[LEFT VIEW OF A BINARY TREE]
Eg:
i/p:
o/p:

M1: Using height of the tree and going level by level - O(H^2)|O(H)
H - Height of the tree

Logic::
void leftView(Node root){
	if(root==null){
		return;
	}
	int height = findHeight(root,0);
	S.O.P(root.data);
	for(int i=1; i<=height; i++){
		printLeftNode(root, i, 0);
	}
}

int findHeight(Node root, int count){
	if(root==null){
		return count;
	}
	return Math.max(findHeight(root.left, count), findHeight(root.right, count))+1;
}
boolean printLeftNode(Node root, int depth, int level){
	if(depth==level){
		SOP(root.data);
		return true;
	}

	boolean inserted = false;
	if(tree.left!=null){
		inserted = printLeftNode(root.left, depth, level+1);
	}
	if(tree.right!=null && !inserted){
		inserted = printLeftNode(root.right, depth, level+1);
	}
	return inserted;
}


M2: Using recursion - O(N)|O(N)
N - No of nodes in the tree


Logic::
static int maxLevel = 0;
void leftView(Node root){
	leftViewUtil(root, 1);
}

leftViewUtil(Node root, int level){
	if(node==null){
		return;
	}
	
	if(maxLevel<level){
		SOP(root.data);
	}

	leftViewUtil(root.left, level+1);
	leftViewUtil(root.right, level+1);
}


M3: Using Queue - O(N)|O(N)
N - No of nodes in the tree

void leftView(Node node){
	Queue<Node> q = new LinkedList<>();
	q.add(node);
	q.add(null);
	while(!q.isEmpty()){
		boolean first = true;
		while(q!=null){
			Node front = node.poll();
			if(first){
				SOP(front.val);
				first = false;
			}
			if(front.left!=null){
				q.add(front.left);
			}
			if(front.right!=null){
				q.add(front.right);
			}
		}
		q.poll();
		q.add(null);
	}
}


14.[MAX PATH SUM BETWEEN TWO LEAVES IN A BINARY TREE] - Math path sum from one leaf node to other leaf node
Eg:
i/p:
o/p:

Solution
M1: O(N)|O(H)
N - no of nodes in the tree
H - Height of the tree - is N - if it is a skewed tree

class Res{
	int val;
}

int maxPathSum(Node root){
	Res res = new Res();
	res.val = Integer.MIN_VALUE;
	maxPathSumUtil(root, res);
	return res.val;
}

int maxPathSumUtil(Node root, Res res){
	if(root==null){
		return 0;
	}
	if(root.left==null && root.right==null){
		return root.data;
	}
	int ls = maxPathSumUtil(root.left, res);
	int rs = maxPathSumUtil(root.right, res);
	
	if(root.left!=null && root.right!=null){
		res = Math.max(res, (ls+rs+root.data));
		return Math.max(ls,rs)+root.data;
	}
	return (root.left==null)?rs+root.data:ls+root.data;
}


15.[CHECK FOR BALANCED TREE] A tree is balanced, if diff btw heights of left and right subtrees is not more than one for all the nodes of tree
Eg:
i/p:
o/p:

Solution:
M1: O(N)|O(H)

Logic::
static boolean balanced = true;

boolean isBalanced(Node root){
	balanced = true;
	height(root, 0);
	return balanced;
}

static int height(Node root, int count){
	if(root==null){
		return count;
	}
	int ls = height(root.left, count+1);
	int rs = height(root.right, count+1);
	if(Math.abs(ls-rs)>1){
		balanced = false;
	}
	return Math.max(ls,rs);
}


16.[MAX PATH SUM IN A BINARY TREE](mayn't be btw leaf nodes)
Eg:
i/p:
o/p:

Solution:
M1: (If nodes are just +ve numbers)-O(N)|O(H)

Logic::
Integer maxPathSum(BinaryTree tree){
	if(tree=null){
		return 0;
	}
	Integer lh = findSum(tree.left, 0);
	Integer rh = findSum(tree.right, 0);
	
	return Math.max(lh+rh+tree.value, Math.max(maxPathSum(tree.left), maxPathSum(tree.right)));
}

public static Integer findSum(BinaryTree tree, int count){
	if(tree==null)
		return count;
	return Math.max(findSum(tree.left, tree.value+count), findSum(tree.right, tree.value+count));
}


M2: O(N)|O(log(N))

Logic::
public static Integer maxPathSum(BinaryTree tree){
	ArrayList<Integer> maxSummArray = findMaxSum(tree);
	return maxSumArray.get(1);
}

ArrayList<Integer> findMaxSum(BinaryTree tree){
	if(tree==null)
		return new ArrayList<Integer>(Arrays.asList(0,0));

	ArrayList<Integer> leftMaxSumArray = findMaxSum(tree.left);
	Integer leftMaxSumAsBranch = leftMaxSumArray.get(0);
	Integer leftMaxSumAsPath = leftMaxSumArray.get(1);

	ArrayList<Integer> rightMaxSumArray = findMaxSum(tree.left);
	Integer rightMaxSumAsBranch = rightMaxSumArray.get(0);
	Integer rightMaxSumAsPath = rightMaxSumArray.get(1);

	Integer maxChildSumAsBranch = Math.max(leftMaxSumAsBranch, rightMaxSumAsBranch);
	Integer maxSumAsBranch = Math.max(maxChildSumAsBranch+tree.value, tree.value);
	Integer maxSumAsRootNode = Math.max(leftMaxSumAsBranch+tree.value+rightMaxSumAsBranch, maxSumAsBranch);
	
	int maxPathSum = Math.max(Math.max(leftMaxPathSum, rightMaxPathSum), maxSumAsRootNode);

	return new ArrayList<Integer>(Arrays.asList(maxSumAsBranch, maxPathSum)); 

}


17.[PRINT BINARY TREE IN VERTICAL ORDER]
Eg:
i/p:
o/p:

Solution:
M1: Finding the width of the tree and then printing elements from min to max width - O(W*N)
W - Width of binary Tree
N - No of nodes in binary Tree

static int min = 0;
static int max = 0;
void verticalOrder(Node node){
	findMinMax(node, 0);
	for(int line_no=min; line_no<=max; line_no++){
		printVerticalLine(node, line_no, 0);
		SOP("");
	}
}

void findMinMax(Node node, int hd){
	if(node==null)
		return;
	if(hd<min){
		min = hd;
	}else if(hd>max){
		max = hd;
	}
	
	findMinMax(node.left, hd-1);
	findMinMax(node.right, hd+1);
}

void printVerticalLine(Node node, int line_no, int hd){
	if(node==null)
		return;
	if(line_no==hd)
		System.out.print(node.data+" ");
	printVerticalLine(node.left, line_no, hd-1);
	printVerticalLine(node.right, line_no, hd+1);
}


M2: Creating a map with key as width and values as list - O(N)|O(N)

Logic::

printVerticalOrder(Node root){
	if(root==null)
		return;
	Map<Integer, vector<Integer>> m = new HashMap<>();
	int hd = 0;
	
	Queue<Pair> q = new Queue<Pair>();
	q.add(pair(root, hd));
	while(!q.isEmpty()){
		Pair temp = q.poll();
		hd = temp.hd;
		Node node = temp.node;
		m.put(hd, node.key));
		if(node.left!=null)
			q.add(Pair(node.left, hd-1));
		if(node.right!=null)
			q.add(Pair(node.right, hd+1));
	}
	Now, print the map
}


18.[MINIMUM COST PATH] Given a 2d grid, each cell - indicates a cost, which represents a cost to traverse through that cell we need to find a path from top left cell to bottom right cell, by which total cost incurred in minimum.
Eg:
i/p:
o/p:

SOlution:
M1:

Logic::

static int minSum = Integer.MAX_VALUE;
static boolean[][] visited;

public static int minCost(int[][] mat, int n){
	visited = new boolean[n][n];
	
	minSum = Integer.MAX_VALUE;
	minCostUtil(mat, n, 0, 0, mat[0][0]);
	return minSum;
}


public static void minCostUtil(int[][] mat, int n, int i, int j, int sum){
	if(i==(n-1) && j==(n-1)){
		if(minSum>sum){
			minSum = sum; 
		}
		return;
	}

	visited[i][j] = true;
	if(isSafe(n, i+1, j)){
		minCostUtil(mat, n, i+1, j, sum+mat[i+1][j]);
	}
	if(isSafe(n, i-1, j)){
		minCostUtil(mat, n, i-1, j, sum+mat[i+1][j]);
	}
	if(isSafe(n, i, j-1)){
		minCostUtil(mat, n, i, j-1, sum+mat[i+1][j]);
	}
	if(isSafe(n, i, j+1)){
		minCostUtil(mat, n, i, j+1, sum+mat[i+1][j]);
	}
	visited[i][j] = false;
	
}

public static boolean isSafe(int n, int i, int j){
	if(i<0||i>=n||j<0||j>=n||visited[i][j])
		return false;
	return true;
}


M2:

Logic::

class Node{
	int x, y, dist;
	Node(int x, int y, int dist){
		this.x = x;
		this.y = y;
		this.dist = dist;
	}
}

boolean valid(int i, int j, int n){
	if(i<=0||i>=n||j<0||j>=n){
		return false;
	}
	return true;
}


static int dx[] = {-1, 0, 0, 1};
static int dy[] = {0, -1, 1, 0};
static int dist[][];
static boolean visited[][];

public static int minCost(int[][] mat, int n){
	dist = new int[n][n];
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			dist[i][j] = Integer.MAX_VALUE;
		}
	}
	
	visited = new boolean[][];

	Queue<Node> q = new PriorityQueue<Node>(new 
				Comparator<Node>(){
					public int compare(Node a, Node b){
						return a.dist-b.dist;
					}
				});
	dist[0][0] = mat[0][0];
	q.add(new Node(0,0,dist[0][0]));

	while(!q.isEmpty()){
		Node node = (Node)q.remove();
		if(node.x==(n-1) && node.y==(n-1))
			return dist[node.x][node.y];

		if(visited[node.x][node.y]){
			continue;
		}
		visited[node.x][node.y]=true;
		for(int k=0; k<4; k++){
			int u = node.x+dx[k];
			int v = node.y+dy[k];
			if(valid(u,v) && !visited[u][v]){
				if(dist[u][v] > dist[node.x][node.y]+mat[u][v]){
					dist[u][v] = dist[node.x][node.y]+mat[u][v]
				}
				q.add(new Node(u,v,dist[u][v]));
			}				
		
					
		}
	}
	return -1;
}
