üåüÔ∏èPROBLEMS ON DYNAMIC PROGRAMMINGüåüÔ∏è

1.[MAXIMUM SUBSET SUM WITH NO ADJACENT ELEMENTS]
Eg:
i/p: [75, 105, 120, 75, 90, 135]
o/p: 330[75, 120, 135]

Solution:
M1: Using Recursion O(N^3)|O(1)
Logic::
maxSubsetSumNoAdjacents(int[] array){
	int n = array.length;
	int max = 0, sum=0;
	for(int i=0; i<n; i++){
		sum = arr[i];
		max = findMaxSubset(array, i, n, sum, max);
	}
	return max;
}

int findMaxSubset(int[] array, int pos, int n, int sum, int max){
	if(max<sum){
		max = sum;
	}
	for(int k=pos+2; k<n; k++){
		if((array[k]+sum)>sum){
			max = findMaxSubset(array, k, n, sum+array[k], max);
		}
	}
	return max;
}

M2: Using Dynamic Programming - O(N)|O(N)
Approach::
array -  [7, 10, 12, 7, 9, 14], sol - 7+12+14 = 33
maxsums -[7, 10, 19, 19, 28, 33]
maxsums[i] = Math.max(maxsums[i-1], maxsums[i-2]+array[i])

Logic::
if(array.length==0){
	return 0;
}
if(array.length==1){
	return array[0];
}

int[] maxsums = new int[n];
maxsums[0] = array[0];
maxsums[1] = Math.max(array[0], array[1]);

for(int i=2; i<n; i++){
	maxsums[i] = Math.max(maxsums[i-1], maxsums[i-2]+array[i]);
}
return maxsums[n-1];

M3: As we are using just Previous 2 elements, everytime to find the result, instead of storing all the elements, we can store just previous 2 elements, 
thus reducing the space complexity O(1) - O(N)|O(1)

Sol: 
if(array.length==0){
	return 0;
}
if(array.length==1){
	return array[0];
}

int first = array[0];
int second = Math.max(array[0], array[1]);

for(int i=2; i<n; i++){
	int current = Math.max(second, first+array[i]);
	first = second;
	second = current;
}
return second;

2.[NUMBER OF WAYS TO MAKE CHANGE] Given array of +ve integers, representing coin denomintaions. Find no of ways to make changes for that target amount
using the given denominations
Eg:
i/p: 6 [1,5]
o/p: 2 ways --[1*1+1*5, 6*1]

M1: O(N.D)|O(N)
N-TargetSum
D-No of Denominations

Logic::
numberOfWaysToMakeChange(int n, int[] denoms){
	int[] ways = new int[n+1];
	ways[0] = 1;
	for(int denom : denoms){
		for(int amount = 1; amount<n+1; amount++){
			if(denom<=amount){
				ways[amount]+=ways[amount-denom]
			}
		}
	}
	return ways[n];
}

3.[LEVENSHTEIN DISTANCE] No of edit operations required to convert first string to second string. 
The edit operations could be insert, deletion or substitution
Eg:
i/p:abc
o/p:yabd

Solution:
M1: USing Dynamic Programming - O(N*M)|O(N*M)
N-length of string 1
M-length of string 2

Logic::
int levennshteinDistance(String str1, String str2){
	int[][] edits = new int[str1.length()+1][str2.length()+1];
	for(int i=0; i<str1.length()+1; i++){
		for(int j=0; j<str2.length()+1; j++){
			edits[i][j] = j;
		}
		edits[i][0] = i;
	}
	
	for(int i=1; i<str1.length()+1; i++){
		for(int j=1; j<str2.length()+1; j++){
			if(str1.charAt(i-1)==str2.charAt(j-1)){
				edits[i][j] = edits[i-1][j-1];
			}else{
				edits[i][j] = 1+Math.min(edits[i][j-1], edits[i-1][j-1], edits[i-1][j]);
			}
		}
	}
	
	return edits[str1.length()][str2.length()];
}

/*M2: Can be solved the same in O(N*M)|O(min(N,M))

Logic::

int levenshteinDistance(String str1, String str2){
	String small = str1.length()<str2.length()?str1:str2;
	String big = str1.length()>=str2.length()?str1:str2;
	
	int[] evenEdits = new int[small.length()+1];
	int[] oddEdits = new int[small.length()+1];
	
	for(int j=0; j<small.length+1; j++){
		evenEdits = j;
	}
}*/


4.[MAX SUM INCREASING SEQUENCE]

5.[LONGEST COMMON SUBSEQUENCE]

6.[KNAPSACK PROBLEM]

7.[DISK STACKING]

8.[MINIMUM NUMBER OF COINS FOR CHANGE] Given denom coins. Find minimum no of coins/notes needed to make the change of RsN. Print all the combinations needed 
to make the change in a separate line.
Eg: 
i/p: denoms  : {1, 2, 5, 10, 20, 50, 100, 200, 500, 2000}, sum : 43
o/p: {20, 20, 2, 1}

Solution:
M1: Can be solved using dynamic programming - O(D*N)|O(D*N)
N- Target Amount/sum, D - denoms array length

Logic::
ArrayList<Integer> findMinCoins(int[] denoms, int N){
	ArrayList<Integer> list = new ArrayList<Integer>();
	int L = -1;
	for(int i=0; i<denoms.length; i++){
		if(denoms[i]<=N){
			L=i+1;
		}else{
			break;
		}
	}
	
	//There are no denom coins which can form the required sum/target sum
	if(L==-1){
		return null;
	}
	
	int[][] numOfCoins = new int[L+1][N+1];
	//By not using denom coins we cant get the required target sum
	Arrays.fill(numOfCoins[0], Integer.MAX_VALUE);
	
	//We are using zero coins to get the target sum of 0
	for(int i=0; i<=L; i++){
		numOfCoins[i][0] = 0;
	}
	
	for(int i=1; i<=L; i++){
		for(int amount = 1; amount<=N; amount++){
			int denom = denoms[i-1];
			if(denom<=N){
				numOfCoins[i][amount] = Math.min(numOfCoins[i-1][amount], numOfCoins[i][amount-denom]+1);
			}else{
				numOfCoins[i][amount] = numOfCoins[i-1][amount];
			}
		}
	}
	
	int i=L, j=N;
	
	if(numOfCoins[i][j] = Integer.MAX_VALUE){
		return null;
	}	
	
	while(i>=1 && j>=1){
		if(numOfCoins[i][j]!=numOfCoins[i-1][j]){
			list.add(denoms[i-1]);
			j = denoms[i-1];
		}else{
			i--;
		}
		return list;
	}
}

9.[MINIMUM NO OF JUMPS] Find the minimum no of jumps required to reach the end of the array from the beginning.
Eg:
i/p: [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
o/p: 3{1,3,8,9}

Solution:
M1: Using Dynamic Programming O(N*N)|O(N)

Logic::
int minJumps(int[] arr, int n){
	int i,j;
	if(n==0||arr[0]==0){
		return Integer.MAX_VALUE;
	}
	
	jumps[0] = 0;
	
	for(int i=1; i<n; i++){
		jumps[i] = Integer.MAX_VALUE;
		for(int j=0; j<i; j++){
			if(i<=j+arr[j]){
				jumps[i] = Math.min(jumps[i], jumps[j]+1);
			}
		}
	}
	
	return jumps[n-1];
}

M2: O(N)|O(1)

Logic::
int minNumberOfJumps(int[] array){
	if(array.length==1){
		return 0;
	}
	
	int jumps = 0;
	int maxReach = array[0];
	int steps = array[0];
	for(int i=1; i<array.length-1; i++){
		maxReach = Math.max(maxReach, i+array[i]);
		steps--;
		if(steps==0){
			jumps++;
			steps = maxReach-1;
		}
	}
	return jumps+1;
}

10.[LONGEST INCREASING SUBSEQUENCE] Find the length of the longest subsequence of a given sequence such that all the elements of the subsequence are sorted in
increasing order.
Eg:
i/p: {3, 10, 2, 1, 20}
o/p: 3 {3, 10, 20}

Solution:
Approach:
L[i] be the length of LIS ending with index i - such that arr[i] is the last element of LIS

L[i] = 1+max(L[j]) where 0<j<i and arr[j]<arr[i]
L[i] = 1, if no such j exists

To find LIS of a given array, we need to return max(L[i]) where 0<i<n

M1: Using recursive method. - O(n!)|O(1)
n - length of the array.

Logic::

static int max_ref;

int list(int[] arr, int n){
	max_ref = 1;
	_lis(arr, n);
	return max_ref;
}

int _lis(int[] arr, int n){
	if(n==1)
	    return 1;
	int res, max_ending_here = 1;
	for(int i=1; i<n; i++){
		res = _lis(arr, i);
		if(arr[i-1]<arr[n-1] && res+1 > max_ending_here){
			max_ending_here = res+1;
		}
	}
	if(max_ref<max_ending_here){
		max_ref = max_ending_here;
	}
	return max_ending_here;
}


M2: Using Dynamic Programming.

Logic::
int lis(int[] arr, int n){
	int[] lis = new int[n];
	int i,j,max=0;
	//Initiating lis values of all the indices
	for(int i=0; i<n; i++){
		lis[i]=1;
	}

	for(int i=1; i<n; i++){
		for(int j=0; j<i; j++){
			if(arr[i]>arr[j] && lis[i]<lis[j]+1){
				lis[i] = lis[j]+1;
			}
		}
	}

	for(int i=0; i<n; i++){
		if(max<lis[i]){
			max = lis[i];
		}
	}
	return max;
}


11.[NUMBERS IN PI] Minimum no of spaces that need to b added to n digits of pi such that all resulting numbers are found in list of numbers.
Eg:
i/p: 3141592635897,  {314159, 5897, 2635, 8, 97, 3141, 59263}
o/p: 2 (3141-59263-5897)

Solution:

M1: O(N^3+M)|O(N+M)
N- No of digits in Pi
M- No of numbers in the list

Logic::
int numbersInPi(String pi, String[] numbers){

	HashSet<String> numbersTable = new HashSet<String>();
	for(String num : numbers)
		numbersTable.add(num);

	HashTable<Integer, Integer> cache = new HashTable<Integer, Integer>();

	int minSpaces = getMinSpaces(pi, numbersTable, cache, 0)l
	return minSpaces==Integer.MAX_VALUE?-1:minSpaces;

}

int getMinSpaces(String pi, HashSet<String> numbersTable, HashMap<Integer, Integer> cache, int idx){
	if(idx==pi.length()){
		return -1;
	}

	if(cache.containsKey(idx)){
		return cache.get(idx);
	}

	int minSpaces = Integer.MAX_VALUE;
	for(int i=idx, i<pi.length(); i++){
		String prefix = pi.substring(idx, i+1);
		if(numbersTable.contains(prefix)){
			int minSpacesInSuffix = getMinSpaces(pi, numbersTable, cache, i+1);
			if(minSpacesInSuffix == Integer.MAX_VALUE){
				minSpaces = Math.min(minSpaces, minSpacesInSuffix);
			}else{
				minSpaces = Math.min(minSpaces, minSpacesInSuffix+1);
			}
		}
	}
	cache.put(idx, minSpaces);
	return cache.get(idx);
}
