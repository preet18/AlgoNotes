üåüÔ∏èPROBLEMS ON RECURSIONüåüÔ∏è

1.[POWERSET] Find all the subsets of the given array.
Eg:
i/p: [1,2,3]
o/p: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]

SOLUTION:
M1: Using Iterative Approach - O(2^N*N)|O(2^N*N)
	Step 1: [[]]
	Step 2: Pick 1st Element - 1 
	[[],[1]]
	Step 3: Pick 2nd Element - 2
	[[],[1],[2],[1,2]]
	Step 4: Pick 3rd Element - 3
	[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Sol1:
ArrayList<ArrayList<Integer>> powerset(ArrayList<Integer> array){
	ArrayList<ArrayList<Integer>> subsets = new ArrayList<ArrayList<Integer>>();
	subsets.add(new ArrayList<Integer>());
	for(Integer e: array){
		int length = subsets.size();
		for(int i=0; i<length; i++){
			ArrayList<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));
			currentSubset.add(e);
			subsets.add(currentSubset);
		}
	}
	return subsets;
}

M2:Using Recursive Approach - O(2^N*N)|O(2^N*N)

Sol2: 
ArrayList<ArrayList<Integer>> powerSet(ArrayList<Integer> array){
	return powerSet(array, array.size()-1);
}

ArrayList<ArrayList<Integer>> powerSet(ArrayList<Integer> array, int idx){
	if(idx<0){
		ArrayList<ArrayList<Integer>> emptySet = new ArrayList<>();
		emptySet.add(new ArrayList<Integer>());
		return emptySet;
	}
	int e = array.get(idx);
	ArrayList<ArrayList<Integer>> subsets = powerset(array, idx-1);
	int length = subsets.size();
	for(int i=0; i<length; i++){
		ArrayList<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));
		currentSubset.add(e);
		subsets.add(currentSubset);
	}
	return subsets;
}

2.[LOWEST COMMON MANAGER] Find the lowest common manager in the given tree for given 2 reporters.
Eg:
i/p1: r1 =  E and r2 = I
o/p1: B
i/p2: r1 = C and r2 = F
o/p2: C

Solution
M1: Iterating through all the nodes of the tree recursively - O(N)|O(N)

Sol1:
class Program{
	static OrgChart lcm = null;
	public static OrgChart getLowestCommonManager(OrgChart topManager, OrgChart reportOne, OrgChart reportTwo){
		if(topManager == null){
			return null;
		}
		lcm = topManager;
		getLCM(topManager, reportOne, reportTwo);
		return lcm;
	}
	
	public static int getLCM(OrgChart tm, OrgChart r1, OrgChart r2){
		int count = 0;
		for(OrgChart dr : tm.directReports){
			count += getLCM(dr, r1, r2);
		}
		if(count==2){
			lcm = tm;
			return 0;
		}
		if(tm.name == r1.name || tm.name == r2.name){
			count += 1;
		}
		if(count==2){
			lcm=tm;
			return 0;
		}
		return count;
	}
}

static class OrgChart{
	public char name;
	public ArrayList<OrgChart> directReports;
	
	OrgChart(char name){
		this.name = name;
		this.directReports = new ArrayList<OrgChart>();
	}

	public void addDirectReports(OrgChart[] directReports){
		for(OrgChart directReport : directReports){
			this.directReport.add(directReport);
		}	
	}
}


3.[PRODUCT SUM]
Eg:
i/p: [5,2,[7,-1],3,[6,[-13,8],4]]
o/p: 12
Explanation: 5+2+2*(7-1)+3+2*(6+3*(-13+8)+4)

M1: Using recursive approach - O(N)|O(N) 
where N - Total no of elements in the arraylist - (Time complexity)
where N - Space - Stack storage during recursion

Sol1:
public static int productSum(ArrayList<Object> array){
	return productSumHelper(array, 1);
}

public static int productSumHelper(ArrayList<Object> array, int multiplier){
	int sum = 0;
	for(Object el:array){
		if(el instanceOf ArrayList){
			sum += productSumHelper((ArrayList)el, multiplier+1);
		}else{
			sum += (int)el;
		}
	}
	return sum*multiplier;
}

4.[RAT IN A MAZE] - Find the solution to move from source to destination in a maze
Eg:
i/p:
[[1,0,0,0],
 [1,1,0,1],
 [0,1,0,0],
 [1,1,1,1]]
o/p:
[[1,0,0,0],
 [1,1,0,0],
 [0,1,0,0],
 [0,1,1,1]]

Solution:
M1: Using Backtracking - O(N*M)|O(N*M)
N-No of rows
M-No of columns

boolean solveMaze(int maze[][], int N){
	int sol[][] = new int[N][N];
	if(solveMazeUtil(maze, 0, 0, sol)==false){
		sop("Solution doesn't exist);
		return false;
	}
	printSolution(sol);
	return true;
}

boolean solveMazeUtil(int maze[][], int x, int y, int sol[][]){
	if(x==N-1 && y==N-1){
		sol[x][y] = 1;
		return true;
	}

	if(isSafe(maze, x, y)==true){
		sol[x][y] = 1;
		if(solveMazeUtil(maze, x+1, y, sol))
			return true;
		if(solveMazeUtil(maze, x, y+1, sol))
			return true;
		sol[x][y] = 0;
		return false;
	}	
	return false;
}

boolean isSafe(int maze[][], int x, int y){
	return (x>=0 && x<N && y>=0 && y<N && maze[x][y]==1);
}

void printSolution(int sol[][]){
	for(int i=0; i<N: i++){
		for(int j=0; j<N: j++){
			sop(" " + sol[i][j] + " ");
		}
		sop();
	}

}



9.[WORD BOGGLE] Find all possible words that can be formed by a sequence of adjacent characters. 
We can move to any of 8 adjacent directions, but a word shouldn't have multiple instances of same cell.
Eg:
i/p: strs[L] = { "GEEKS", "FOR", "QUIZ", "GO"}
     boggle[N][M] = { {'G', 'I', 'Z'},
					{'U', 'E', 'K'},
					{'Q', 'S', 'E'}};
o/p: { "GEEKS", "QUIZ"}

Solution:
M1: O(L*S + (N*M)^2)|O(L*S + (N*M))
N*M - Boggle dimensions
L - Length of strs Array
S - Length of the biggest String
TimeComplexity::
O(L*S) - To store strings of array in trie
O(N*M)^2 - For each letter of boggle trying to find strings
SpaceComplexity::
O(L*S) - To store strings of array in trie
O(N*M) - to hold visited array


Logic::
static class Trie{
	Trie[] alpha;
	boolean end;
	Trie(){
		alpha = new Trie[26];
		end = false;
	}
}				
				
main(){
	Trie root = new Trie();
	insertWords(root, strs);
	wordBoggle(root, mat, n, m);
}

insertWords(Trie root, String[] strs){
	for(int i=0; i<strs.length; i++){
		Trie node = root;
		for(int j=0; j<strs[i].length(); j++){
			char ch = strs[i].charAt(j);
			int pos = ch-'A';
			if(node.alpha[pos] == null){
				node.alpha[pos] = new Trie();
			}
			node = node.alpha[pos];
		}
		node.end = true;
	}
}

wordBoggle(Trie root, char[][] mat, int n, int m){
	boolean[][] visited;
	ArrayList<String> list = new ArrayList<String>();
	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			Trie node = root;
			visited = new boolean[n][m];
			char ch = mat[i][j];
			int pos = ch - 'A';
			String str = String.valueOf(ch);
			if(node.alpha[pos]!=null){
				wordBoggleUtil(node.alpha[pos], mat, i, j, n, m, visited, list, str);
			}
		}
	}
	if(list.size()>0){
		printSolution(list);
	}else{
		System.out.println("-1");
	}
}

wordBoggleUtil(Trie node, char[][] mat, int row, int col, int n, int m, boolean[][] visited, ArrayList<String> list, String str){
	if(node.end && !list.contains(str)){
		list.add(str);
	}

	visited[row][col] = true;
	if(isSafe(node, mat, row+1, col, n, m, visited)){
		char ch = mat[row+1][col];
		int pos = ch-'A';
		wordBoggleUtil(nod.alpha[pos], mat, row+1, col, n, m, visited, list, str+String.valueOf(ch));
	}
	.
	.
	.
	.
	.
	.
	.
	Iterated over the remaining directions
	visited[row][col] = false;
	return;
}

boolean isSafe(Trie node, char[][] mat, int row, int col, int n, int m, boolean[][] visited){
	if(row==-1||row==n||col==-1||col==m|||visited[row][col]||node.alpha[mat[row][col]-'A']==null){
		return false;
	}
	return true;
}


