üåüÔ∏èPROBLEMS ON RECURSIONüåüÔ∏è

1.[POWERSET] Find all the subsets of the given array.
Eg:
i/p: [1,2,3]
o/p: [[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]

SOLUTION:
M1: Using Iterative Approach - O(2^N*N)|O(2^N*N)
	Step 1: [[]]
	Step 2: Pick 1st Element - 1 
	[[],[1]]
	Step 3: Pick 2nd Element - 2
	[[],[1],[2],[1,2]]
	Step 4: Pick 3rd Element - 3
	[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Sol1:
ArrayList<ArrayList<Integer>> powerset(ArrayList<Integer> array){
	ArrayList<ArrayList<Integer>> subsets = new ArrayList<ArrayList<Integer>>();
	subsets.add(new ArrayList<Integer>());
	for(Integer e: array){
		int length = subsets.size();
		for(int i=0; i<length; i++){
			ArrayList<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));
			currentSubset.add(e);
			subsets.add(currentSubset);
		}
	}
	return subsets;
}

M2:Using Recursive Approach - O(2^N*N)|O(2^N*N)

Sol2: 
ArrayList<ArrayList<Integer>> powerSet(ArrayList<Integer> array){
	return powerSet(array, array.size()-1);
}

ArrayList<ArrayList<Integer>> powerSet(ArrayList<Integer> array, int idx){
	if(idx<0){
		ArrayList<ArrayList<Integer>> emptySet = new ArrayList<>();
		emptySet.add(new ArrayList<Integer>());
		return emptySet;
	}
	int e = array.get(idx);
	ArrayList<ArrayList<Integer>> subsets = powerset(array, idx-1);
	int length = subsets.size();
	for(int i=0; i<length; i++){
		ArrayList<Integer> currentSubset = new ArrayList<Integer>(subsets.get(i));
		currentSubset.add(e);
		subsets.add(currentSubset);
	}
	return subsets;
}

2.[LOWEST COMMON MANAGER] Find the lowest common manager in the given tree for given 2 reporters.
Eg:
i/p1: r1 =  E and r2 = I
o/p1: B
i/p2: r1 = C and r2 = F
o/p2: C

Solution
M1: Iterating through all the nodes of the tree recursively - O(N)|O(N)

Sol1:
class Program{
	static OrgChart lcm = null;
	public static OrgChart getLowestCommonManager(OrgChart topManager, OrgChart reportOne, OrgChart reportTwo){
		if(topManager == null){
			return null;
		}
		lcm = topManager;
		getLCM(topManager, reportOne, reportTwo);
		return lcm;
	}
	
	public static int getLCM(OrgChart tm, OrgChart r1, OrgChart r2){
		int count = 0;
		for(OrgChart dr : tm.directReports){
			count += getLCM(dr, r1, r2);
		}
		if(count==2){
			lcm = tm;
			return 0;
		}
		if(tm.name == r1.name || tm.name == r2.name){
			count += 1;
		}
		if(count==2){
			lcm=tm;
			return 0;
		}
		return count;
	}
}

static class OrgChart{
	public char name;
	public ArrayList<OrgChart> directReports;
	
	OrgChart(char name){
		this.name = name;
		this.directReports = new ArrayList<OrgChart>();
	}

	public void addDirectReports(OrgChart[] directReports){
		for(OrgChart directReport : directReports){
			this.directReport.add(directReport);
		}	
	}
}


3.[PRODUCT SUM]
Eg:
i/p: [5,2,[7,-1],3,[6,[-13,8],4]]
o/p: 12
Explanation: 5+2+2*(7-1)+3+2*(6+3*(-13+8)+4)

M1: Using recursive approach - O(N)|O(N) 
where N - Total no of elements in the arraylist - (Time complexity)
where N - Space - Stack storage during recursion

Sol1:
public static int productSum(ArrayList<Object> array){
	return productSumHelper(array, 1);
}

public static int productSumHelper(ArrayList<Object> array, int multiplier){
	int sum = 0;
	for(Object el:array){
		if(el instanceOf ArrayList){
			sum += productSumHelper((ArrayList)el, multiplier+1);
		}else{
			sum += (int)el;
		}
	}
	return sum*multiplier;
}

4.[RAT IN A MAZE] - Find the solution to move from source to destination in a maze
Eg:
i/p:
[[1,0,0,0],
 [1,1,0,1],
 [0,1,0,0],
 [1,1,1,1]]
o/p:
[[1,0,0,0],
 [1,1,0,0],
 [0,1,0,0],
 [0,1,1,1]]

Solution:
M1: Using Backtracking - O(N*M)|O(N*M)
N-No of rows
M-No of columns

boolean solveMaze(int maze[][], int N){
	int sol[][] = new int[N][N];
	if(solveMazeUtil(maze, 0, 0, sol)==false){
		sop("Solution doesn't exist);
		return false;
	}
	printSolution(sol);
	return true;
}

boolean solveMazeUtil(int maze[][], int x, int y, int sol[][]){
	if(x==N-1 && y==N-1){
		sol[x][y] = 1;
		return true;
	}

	if(isSafe(maze, x, y)==true){
		sol[x][y] = 1;
		if(solveMazeUtil(maze, x+1, y, sol))
			return true;
		if(solveMazeUtil(maze, x, y+1, sol))
			return true;
		sol[x][y] = 0;
		return false;
	}	
	return false;
}

boolean isSafe(int maze[][], int x, int y){
	return (x>=0 && x<N && y>=0 && y<N && maze[x][y]==1);
}

void printSolution(int sol[][]){
	for(int i=0; i<N: i++){
		for(int j=0; j<N: j++){
			sop(" " + sol[i][j] + " ");
		}
		sop();
	}

}

5.[RAT IN A MAZE PROBLEM WHEN MOVEMENT IN ALL DIRECTIONS IS ALLOWED] 
Eg:
i/p1: N = 4
[[1 0 0 0],
 [1 1 0 1],
 [0 1 0 0],
 [0 1 1 1]]
o/p1:DRDDRR

i/p2:N=4
[[1 0 0 0]
 [1 1 0 1]
 [1 1 0 0]
 [0 1 1 1]]
o/p2: DDRDRR, DRDDRR

Solution:
M1: Applying Backtracking - O(N*N)|O(1)

ArrayList<String> printPath(int[][] m, int n){
	boolean[][] visited = new boolean[n][n];
	Stack<Character> stack = new Stack<Character>();
	ArrayList<String> list = new ArrayList<String>();
	findPath(m,n,0,0,stack,list,visited);
	return list;
}

void findPath(int[][] m, int n, int r, int c, Stack<Character> stack, ArrayList<String> list, boolean[][] visited){
	if(r==-1||r==n||c==-1||c==n||visited[r][c]||m[r][c]==0){
		return;
	}
	if(r==n-1&&c==n-1){
		addPathToList(list, stack);
		return;
	}
	visited[r][c] = true;
	if(isSafe(m,n,r+1,c,visited)){
		stack.push('D');
		findPath(m,n,r+1,c,stack,list,visited);
		stack.pop();
	}

	if(isSafe(m,n,r,c-1,visited)){
		stack.push('L');
		findPath(m,n,r,c-1,stack,list,visited);
		stack.pop();
	}

	if(isSafe(m,n,r,c+1,visited)){
		stack.push('R');
		findPath(m,n,r,c+1,stack,list,visited);
		stack.pop();
	}

	if(isSafe(m,n,r-1,c,visited)){
		stack.push('U');
		findPath(m,n,r-1,c,stack,list,visited);
		stack.pop();
	}
	visited[r][c] = false;
}

boolean isSafe(int[][] m, int n, int r, int c, boolean[][] visited){
	if(r>=0&&r<n&&c>=0&&c<n&&m[r][c]==1&&!visited[r][c]){
		return true;
	}
	return false;
}

void addPathToList(ArrayList<String> list, Stack<Character> stack){
	Iterator it = stack.iterator();
	StringBuilder str = new StringBuilder("");
	while(it.hasNext()){
		str.append(it.next());
	}
	list.add(str.toString());
}

6.[GENERATE IP ADDRESSES] For given input print all combinations of IP Addresses
Eg:
i/p:11211
o/p:   {1.1.2.11, 
	1.1.21.1,
	1.12.1.1,
	11.2.1.1}

M1: Generating all the possible combinations from 1 to 3 digits and checking if it is valid.
Naive Solution: O(81)|O(81)

ArrayList<String> generateIP(String s){
	ArrayList<String> list = new ArrayList<String>();
	for(int i=1; i<=3; i++){
		for(int j=1; j<=3; j++){
			for(int k=1; k<=3; k++){
				for(int l=1; l<=3; l++){
					if(i+j+k+l==s.length()){
						int a = (int)s.substring(0,i);
						int b = (int)s.substring(i,i+j);
						int c = (int)s.substring(i+j,i+j+k);
						int d = (int)s.substring(i+j+k, i+j+k+l);
						if(ok(a,b,c,d)){
							String str = gen(a,b,c,d);
							if(str.length()==s.length()+3){
								list.add(str);
							}
						}
					}
				}
			}
		}
	}
	return list;
}

boolean ok(int a, int b, int c, int d){
	return (a<=255 && b<=255 && c<=255 && d<=255);
}

String gen(int a, int b, int c, int d){
	return (a+"."+b+"."+c+"."+d);
}


7.[SUDOKU SOLVER] 

Solution:
public static void solveSudoku(int[][] board){
	int n = board.length;
	if(solveSudokuUtil(board, n)){
		printSolution(board, n);
	}else{
		sop("No Solution Found");
	}
}

public static boolean solveSudokuUtil(int[][] board, int n){
	int row = -1;
	int col = -1;
	boolean isCellEmpty = false;
	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			if(board[i][j]==0){
				row = i;
				col = j;
				isCellEmpty = true;
				break;
			}
		}
		if(isCellEmpty){
			break;
		}
	}

	if(!isCellEmpty){
		return true;
	}

	for(int num=1; num<=n; num++){
		if(isSafe(board,n,num,row,col)){
			board[row][col] = num;
			if(solveSudokuUtil(board,n)){
				return true;
			}
			board[row][col]=0;
		}
	}
	return false;
}

public static boolean isSafe(int[][] board, int n, int num, int row, int col){
	for(int i=0; i<n; i++){
		if(board[i][col]==num){
			return false;
		}
	}

	for(int i=0; i<n; i++){
		if(board[row][i]==num){
			return false;
		}
	}

	int sqrt = (int) Math.sqrt(n);
	int boxRowStart = row - row%sqrt;
	int boxColStart = col - col%srqt;

	for(int i=boxRowStart; i<boxRowStart+sqrt; i++){
		for(int j=boxColStart; j<boxColStart+sqrt; j++){
			if(board[i][j]==num){
				return false;
			}
		}
	}
}

8.[N QUEEN PROBLEM USING BACKTRACKING]
Eg:
i/p: 4
o/p: [[0,Q,0,0],
      [0,0,0,Q],
      [Q,0,0,0],
      [0,0,Q,0]]


Solution:
M1:
public static void solveNQ(int n){
	int[][] board = new int[n][n];
	ArrayList<ArrayList<Integer>> list = new ArrayList<>();
	if(solveNQUtil(board, 0, n, list)){
		printSolution(list);
	}else{
		sop("No Solution Found");
	}
}

public static boolean solveNQUtil(int[][] board, int col, int n, ArrayList<ArrayList<Integer>> list){
	if(col>=n){
		ArrayList<Integer> res = frameTheSolution(board, n);
		list.add(res);
		return true;
	}

	boolean res = false;
	for(int row=0; row<n; row++){
		if(isSafe(board, row, col, n)){
			board[row][col]=1;
			res = solveNQUtil(board, col+1, n, list)||res;
			board[row][col] = 0;
		}
	}
	return res;
} 

public static boolean isSafe(int[][] board, int row, int col, int n){
	for(int i=0; i<col; i++){
		if(board[row][i]==1){
			return false;
		}
	}

	for(int i=row, j=col; i>=0 && j>=0; i--,j--){
		if(board[i][j]==1){
			return false;
		}
	}

	for(int i=row, j=col; i<n&&j>=0; i++,j--){
		if(board[i][j]==1){
			return false;	
		}
	}
	return true;
}


9.[WORD BOGGLE] Find all possible words that can be formed by a sequence of adjacent characters. 
We can move to any of 8 adjacent directions, but a word shouldn't have multiple instances of same cell.
Eg:
i/p: strs[L] = { "GEEKS", "FOR", "QUIZ", "GO"}
     boggle[N][M] = { {'G', 'I', 'Z'},
					{'U', 'E', 'K'},
					{'Q', 'S', 'E'}};
o/p: { "GEEKS", "QUIZ"}

Solution:
M1: O(L*S + (N*M)^2)|O(L*S + (N*M))
N*M - Boggle dimensions
L - Length of strs Array
S - Length of the biggest String
TimeComplexity::
O(L*S) - To store strings of array in trie
O(N*M)^2 - For each letter of boggle trying to find strings
SpaceComplexity::
O(L*S) - To store strings of array in trie
O(N*M) - to hold visited array


Logic::
static class Trie{
	Trie[] alpha;
	boolean end;
	Trie(){
		alpha = new Trie[26];
		end = false;
	}
}				
				
main(){
	Trie root = new Trie();
	insertWords(root, strs);
	wordBoggle(root, mat, n, m);
}

insertWords(Trie root, String[] strs){
	for(int i=0; i<strs.length; i++){
		Trie node = root;
		for(int j=0; j<strs[i].length(); j++){
			char ch = strs[i].charAt(j);
			int pos = ch-'A';
			if(node.alpha[pos] == null){
				node.alpha[pos] = new Trie();
			}
			node = node.alpha[pos];
		}
		node.end = true;
	}
}

wordBoggle(Trie root, char[][] mat, int n, int m){
	boolean[][] visited;
	ArrayList<String> list = new ArrayList<String>();
	for(int i=0; i<n; i++){
		for(int j=0; j<m; j++){
			Trie node = root;
			visited = new boolean[n][m];
			char ch = mat[i][j];
			int pos = ch - 'A';
			String str = String.valueOf(ch);
			if(node.alpha[pos]!=null){
				wordBoggleUtil(node.alpha[pos], mat, i, j, n, m, visited, list, str);
			}
		}
	}
	if(list.size()>0){
		printSolution(list);
	}else{
		System.out.println("-1");
	}
}

wordBoggleUtil(Trie node, char[][] mat, int row, int col, int n, int m, boolean[][] visited, ArrayList<String> list, String str){
	if(node.end && !list.contains(str)){
		list.add(str);
	}

	visited[row][col] = true;
	if(isSafe(node, mat, row+1, col, n, m, visited)){
		char ch = mat[row+1][col];
		int pos = ch-'A';
		wordBoggleUtil(nod.alpha[pos], mat, row+1, col, n, m, visited, list, str+String.valueOf(ch));
	}
	.
	.
	.
	.
	.
	.
	.
	Iterated over the remaining directions
	visited[row][col] = false;
	return;
}

boolean isSafe(Trie node, char[][] mat, int row, int col, int n, int m, boolean[][] visited){
	if(row==-1||row==n||col==-1||col==m|||visited[row][col]||node.alpha[mat[row][col]-'A']==null){
		return false;
	}
	return true;
}


